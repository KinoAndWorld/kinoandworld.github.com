<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 笔记 | 奇诺の世界]]></title>
  <link href="http://KinoAndWorld.github.io/blog/categories/bi-ji/atom.xml" rel="self"/>
  <link href="http://KinoAndWorld.github.io/"/>
  <updated>2015-06-16T15:41:45+08:00</updated>
  <id>http://KinoAndWorld.github.io/</id>
  <author>
    <name><![CDATA[Kino]]></name>
    <email><![CDATA[kinoandworld@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一些iOS面试题的探索]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/12/17/some-ios-question-study/"/>
    <updated>2013-12-17T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/12/17/some-ios-question-study</id>
    <content type="html"><![CDATA[<p>其实就是因为cocosachina的<a href="http://www.cocoachina.com/gamedev/misc/2013/1209/7499.html">一篇文章</a>
看了之后发现自己好多objective-C的细节都没弄清楚，所以记录一下，会的不会的都写一下~</p>

<h3>==题目==</h3>

<p>1、假设有三个对象，一个父类的父类，一个父类和一个子类。父类的父类持有父类的引用（retain），父类持有子类的引用（retain），子类持有父类的引用（retain）。父类的父类释放（release）父类，解释下会发生什么。</p>

<pre><code>`父类被父类的父类释放掉以后，父类的引用计数-1，而因为子类拥有父类的计数，父类并未销毁。`
</code></pre>

<p>2、当一个空指针（nil pointer）调用了一个方法会发生什么？</p>

<pre><code>`安然无恙 —— 这是oc自带的消息机制，nil也能发送消息，而不会报错`
</code></pre>

<p>3、为什么retainCount绝对不能用在发布的代码中？请给出两个相对独立的解释。</p>

<pre><code>- retainCount受到时间和framework的影响太大，不能准确反映内存的引用计数
- retainCount很容易迷惑人，采取规范的内存管理才是正道
</code></pre>

<p>4、请说明一下你查找或者解决内存泄露的处理过程。</p>

<pre><code>`使用instruments作为动态分析的手段，还有Xcode的静态内存分析`
</code></pre>

<p>5、解释下自动回收池(autorelease pool)在程序运行时是如何运作的.</p>

<pre><code>`xcode为开发者写的代码外层包了一层NSAutoreleasePool。建立一个回收池堆栈(Stack)每次对象发送autorelease消息时，对象的引用计数并不真正变化，而是向pool中添加一条记录，记下对象的这种要求。最后当pool发送drain或release消息时，池中的所有对象的这种要求一一被执行。顺便说下使用场景：`
</code></pre>

<ul>
<li>应用不是基于”Application Kit”，像”Command-line tool”，因为它并没有内置的”autorelease pools”的支持。</li>
<li>创建线程，你必需在线程开始时创建一个”Autorelease Pool”实例。反之，会造成内存池露（会在以后的文章详细说明线程与池的技巧）。</li>
<li>一个循环内创建了太多的临时对象，你应该为他们创建一个”Autorelease Pool”对象，并在下次循还前销毁它们。</li>
</ul>


<p>6、当处理属性申明的时候，原子（atomic）跟 非原子（non-atomic）属性有什么区别？</p>

<pre><code>`事关多线程，原子（atomic）可以说是线程安全的，也就是在读取这个属性的变量的时候，会进行一些额外的操作（比如锁）.所以说，atomic会比较安全但是比较耗时。`
</code></pre>

<p>7、在C语言中，你如何能用尽可能短的时间来倒转一个字符串？</p>

<pre><code>`这个我真不知道有什么高效的方法~`  [有篇文章可参考](http://www.cnblogs.com/JCSU/articles/1305401.html)
</code></pre>

<p>8、遍历一个NSArray和一个NSSet，哪一个更快？</p>

<pre><code>`其实意思是问，遍历一个链表和哈希表，哪个更快？`
[参考一下](http://maccrazy.diandian.com/post/2011-10-09/5671451) 结论在最后
</code></pre>

<p>9、Objective-C中的posing指的是什么？</p>

<pre><code>[参考](http://blog.csdn.net/tenfyguo/article/details/9220535)
</code></pre>

<p>10、copy跟retain有什么区别？</p>

<pre><code>`一个是复制内容，一个引用计数+1，（nsstring比较特殊，两个的功能几乎一样）需要注意的是，自定义的类需要重写一个方法以实现自己的深复制：`

    -(id) copyWithZone:(NSZone *) Zone{
        grandSuper * scCopy;
        scCopy=[[[self class] allocWithZone:Zone]init];
        return scCopy;
    }
</code></pre>

<p>11、执行如下的代码会发生什么情况？</p>

<pre><code>    Ball *ball = [[[[Ball alloc] init] autorelease] autorelease]; 
</code></pre>

<p>&mdash;&mdash;&mdash;崩溃，因为重复释放，在自动回收池下一次进行回收时崩溃</p>

<p>很多地方理解可能还是有问题~继续努力吧 ↖(^ω^)↗</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亲历的iOS面试题]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/12/03/ios-interview-question/"/>
    <updated>2013-12-03T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/12/03/ios-interview-question</id>
    <content type="html"><![CDATA[<p>上个星期在V2EX上看到一个酷工作然后挺心动的，俗话说心动不如行动，所以我二话不说当基(机)立断地把简历投了去~
然后马不停蹄地跑去广州面试了~</p>

<p>说实话面试官江哥给我感觉很亲切……完全没有紧张的氛围~当然内心还是有点小紧张的~
好吧进入正题，主要是有几个问题我感觉自己理解的还是不够透彻，趁着面试暴露出来，现在就加深一下了解。</p>

<h2>block到底是什么东西</h2>

<p>按照我的理解，block类似一个函数指针，主要应用场景总结下就是：
&ndash; 当调用其他的功能模块，或者自己写一个通用的功能模块的时候，代替delegate去做回调，这样的好处是不用再去声明回调函数，再去函数里面处理，而是直接把处理结果传进去，直接而优雅。
&ndash; 使用多线程（GCD）的时候，因为GCD的语法是直接用block的，所以这两个好搭档可谓是天衣无缝，举个栗子：</p>

<pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    //进行异步操作
    dispatch_async(dispatch_get_main_queue(), ^{
        //回到主线程
    });
});
</code></pre>

<p>短短几行代码就可以线程安全地玩转在新创建的线程和主线程之间，这种便利的愉悦是不言而喻的~</p>

<p>因为我自己理解也不是很深~所以还需要慢慢学习</p>

<p>关于语法描述 <a href="http://fuckingblocksyntax.com/">看这里</a>
还有个很好地资料 <a href="http://onevcat.com/2011/11/objective-c%E4%B8%AD%E7%9A%84block/">看这里</a></p>

<h2>多线程的几种实现方式</h2>

<ul>
<li><p>NSTheard</p></li>
<li><p>NSOperation</p></li>
<li><p>GCD</p></li>
</ul>


<p>具体使用栗子：<a href="http://www.uml.org.cn/mobiledev/201210262.asp">http://www.uml.org.cn/mobiledev/201210262.asp</a></p>

<h2>页面动画的几种实现方式</h2>

<ul>
<li><p>UIView animation 动画</p></li>
<li><p>CoreAnimation 动画  参考：<a href="http://www.dreamingwish.com/dream-2012/the-concept-of-coreanimation-programming-guide.html">iOS核心动画编程指南</a></p></li>
<li><p>简单粗暴地用 OpenGL ES实现</p></li>
</ul>


<p>这是我的答案……不知道是否正确或者全面
目前我也就第一个用得比较多，CoreAnimation还在慢慢学 ╮(╯▽╰)╭</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS常用第三方库的备忘和介绍]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/10/21/ios-third-tool-introduce/"/>
    <updated>2013-10-21T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/10/21/ios-third-tool-introduce</id>
    <content type="html"><![CDATA[<p>俗话说不要重复造轮子~身为一个IOS开发者我们有必要知道一些先进好用的第三方开源库，
不仅可以在项目中加快开发进度，更可以通过研究这些开源库提高自己的水平~</p>

<p>下面介绍自己用过和流行的一些开源库</p>

<h2>视图</h2>

<ul>
<li><a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a> 很常用的模态等待窗口~使用简单明了</li>
<li><a href="https://github.com/brennanMKE/PhotoZoom">PZPhotoView</a> 一个封装的比较好的滚动视图</li>
<li><a href="https://github.com/rs/SDWebImage">SDWebImage</a> 替代UIImageView，支持异步加载网络图片和自动缓存</li>
<li><a href="https://github.com/enormego/EGOImageLoading">EGOImageView</a> 同上</li>
<li><a href="https://github.com/Inferis/ViewDeck">ViewDeck</a> 仿Path和Facebook的左右侧滑视图</li>
<li><a href="https://github.com/Grouper/FlatUIKit">FlatUIKit</a> 看起来很棒的UI组件 正如名字一样 扁平风</li>
<li><a href="https://github.com/enormego/EGOTableViewPullRefresh">EGOTableViewPullRefresh</a> 下拉刷新 上拉加载更多的功能集成 很常用</li>
</ul>


<h2>网络</h2>

<ul>
<li><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> 最受欢迎的网络框架 集成得很好而且易于扩展</li>
<li><a href="https://github.com/MugunthKumar/MKNetworkKit">MKNetworkKit</a> 这个我比较常用 因为使用简单方便~</li>
</ul>


<h2>数据</h2>

<ul>
<li><a href="https://github.com/johnezang/JSONKit">JSONKit</a> 简单易用的JSON解析库</li>
<li><a href="https://github.com/ccgus/fmdb">FMDB</a> 很知名的SQLITE操作封装库</li>
<li><a href="https://github.com/kelp404/CocoaSecurity">CocoaSecurity</a> 提供了 AES加解密和Hash(MD5, HmacMD5, SHA1~SHA512, HmacSHA1~HmacSHA512)的加密</li>
</ul>


<h2>综合</h2>

<ul>
<li><a href="https://github.com/jverkoey/nimbus">nimbus</a> 一个替代THREE20的框架 功能集成了蛮多的</li>
<li><a href="https://github.com/devinross/tapkulibrary">tapkulibrary</a> 封装了常用的UI控件和功能</li>
<li><a href="https://github.com/soffes/sstoolkit">sstoolkit</a> 这个也比较知名 提供了很多常用的扩展和UI控件</li>
</ul>


<p>先想到这么多……有空再补充吧~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用书签 and 开发资料]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/08/21/bookmark-collection/"/>
    <updated>2013-08-21T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/08/21/bookmark-collection</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://ruby-china.org/wiki/install_ruby_guide">如何快速正确的安装 Ruby, Rails 运行环境</a></p></li>
<li><p><a href="http://wuyuans.com/2012/09/cpp-operator-overload/">c++运算符重载总结</a></p></li>
<li><p><a href="http://www.cnblogs.com/xFreedom/archive/2011/05/16/2048037.html">标准C++中的string类的用法总结</a></p></li>
<li><p><a href="http://www.cnblogs.com/liqiongxiong/archive/2013/01/24/2875722.html">C++时间与字符串转换</a></p></li>
<li><p><a href="http://www.cocoachina.com/newbie/tutorial/2010/1206/2443.html">四个 iPhone 应用的原型设计工具介绍</a></p></li>
<li><p><a href="http://blog.csdn.net/column/details/jacky-cocos2dx.html">玩转cocos2d-x  从零开始的cocos2d-x开发之路</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby学习笔记-杂记]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/07/12/ruby-study-note-02/"/>
    <updated>2013-07-12T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/07/12/ruby-study-note-02</id>
    <content type="html"><![CDATA[<p>比较零散的记录</p>

<p>&mdash;</p>

<h2>array操作</h2>

<p><code>.push</code> 很明显就是添加一个元素</p>

<p><code>&lt;&lt;</code> 添加元素另一种写法</p>

<pre><code>    "Yukihiro " &lt;&lt; "Matsumoto"
    # ==&gt; "Yukihiro Matsumoto"
</code></pre>

<p><code>||=</code> 这个语法也挺奇怪，意思如下</p>

<pre><code>prime_array ||= [] 这句的意思等于 
prime_array = [] if prime_array.nil?
</code></pre>

<p><code>yield</code>关键字 算是占位符，或者有说类似虚函数，后面才实现</p>

<pre><code>def greeter #
    yield
end
phrase = Proc.new {puts "Hello there!"}
greeter(&amp;phrase)
</code></pre>

<p><code>collect</code> or <code>map</code> or <code>select</code> 这三个的作用。。算是迭代器吧c操作数字数组等，map操作字符串数组……不过我暂时不知道他们的区别。</p>

<p><code>lambda</code> 匿名函数，相当于一个block
<code>is_a?[类型名]</code> 这个语法就是判断一个变量是否是某种类型 有种isSubClass的概念</p>

<pre><code>my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]
symbol_filter = lambda {|x| x.is_a? Symbol}
symbols = my_array.select(&amp;symbol_filter)
</code></pre>

<p><code>attr_accessor</code>  <code>attr_reader</code> <code>attr_writer</code> 三种属性，或者说访问器，也就是给变量加上一些访问设置，主要用在类里边的~</p>

<p>先到这里，以后慢慢补充~</p>
]]></content>
  </entry>
  
</feed>
