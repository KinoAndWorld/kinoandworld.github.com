<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[奇诺の世界]]></title>
  <link href="http://KinoAndWorld.github.io/atom.xml" rel="self"/>
  <link href="http://KinoAndWorld.github.io/"/>
  <updated>2016-04-05T17:27:45+08:00</updated>
  <id>http://KinoAndWorld.github.io/</id>
  <author>
    <name><![CDATA[Kino]]></name>
    <email><![CDATA[kinoandworld@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[打造一个直观易复用的iOS设置菜单页]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2016/04/05/build-a-reusable-menu-setting-item-in-ios/"/>
    <updated>2016-04-05T16:09:14+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2016/04/05/build-a-reusable-menu-setting-item-in-ios</id>
    <content type="html"><![CDATA[<p>几乎每一个App都有一个设置菜单页，而且他们几乎都长这样：</p>

<p><img src="http://KinoAndWorld.github.io/images/setting-page-shot.jpg"></p>

<h2>反面教材</h2>

<p>最简单最原始的做法是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span><span class="p">{</span>
</span><span class='line'>  <span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="s">@&quot;cell&quot;</span>
</span><span class='line'>                                                          <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>          <span class="c1">// configure cell</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>          <span class="c1">// configure cell</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>          <span class="c1">// configure cell</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tableView</span> <span class="nl">deselectRowAtIndexPath:</span><span class="n">indexPath</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>            <span class="c1">// click cell 0</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>            <span class="c1">// click cell 1</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>            <span class="c1">// click cell 2</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样做不仅违反了DRY原则，在菜单项比较多的情况下烦不胜烦，而且一旦需要修改某个菜单项的内容，或者插入或者删除，修改起来都是非常容易出错的，换句话说，可维护性非常差。</p>

<h2>抽象、依赖转移</h2>

<p>通过观察我们可以发现，这些列表的结构非常相似，那么很自然地我们可以想到建立一个通用的模型来表示一个菜单.</p>

<figure class='code'><figcaption><span>KOSettingItem.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">KOSettingItem</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIImage</span> <span class="o">*</span><span class="n">imageIcon</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UITableViewCellAccessoryType</span> <span class="n">accessoryType</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="n">handleCallback</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span> <span class="nf">itemWithTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span>
</span><span class='line'>                          <span class="nf">icon:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span> <span class="nf">itemWithTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span>
</span><span class='line'>                          <span class="nf">icon:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span>
</span><span class='line'>                         <span class="nf">block:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="nv">handle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span>
</span><span class='line'>               <span class="nf">icon:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span>
</span><span class='line'>              <span class="nf">block:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="nv">handle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'><span class="k">@end</span>   
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>KOSettingItem.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="k">@implementation</span> <span class="nc">KOSettingItem</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span> <span class="nl">itemWithTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">title</span>
</span><span class='line'>                            <span class="nl">icon:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="n">image</span><span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">itemWithTitle:</span><span class="n">title</span> <span class="nl">icon:</span><span class="n">image</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span> <span class="nl">itemWithTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">title</span>
</span><span class='line'>                            <span class="nl">icon:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="n">image</span>
</span><span class='line'>                            <span class="nl">block:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="n">handle</span><span class="p">{</span>
</span><span class='line'>      <span class="n">KOSettingItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="n">title</span> <span class="nl">icon:</span><span class="n">image</span> <span class="nl">block:</span><span class="n">handle</span><span class="p">];</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">initWithTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">title</span>
</span><span class='line'>                 <span class="nl">icon:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="n">image</span>
</span><span class='line'>                <span class="nl">block:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)())</span><span class="n">handle</span><span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span><span class="p">;</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">imageIcon</span> <span class="o">=</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">handleCallback</span> <span class="o">=</span> <span class="n">handle</span><span class="p">;</span>
</span><span class='line'>          <span class="n">self</span><span class="p">.</span><span class="n">accessoryType</span> <span class="o">=</span> <span class="n">UITableViewCellAccessoryDisclosureIndicator</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">@end</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>一个简单的模型就这样建好了，其中我们用block写了一个handleCallback用来处理表格的点击事件，接着我们来应用到TableView中，首先新增一个property <code>@property (strong, nonatomic) NSArray *settingItems;</code></p>

<p>然后在ViewDidLoad中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">KOSettingItem</span> <span class="o">*</span><span class="n">item1</span> <span class="o">=</span> <span class="p">[</span><span class="n">KOSettingItem</span> <span class="nl">itemWithTitle:</span><span class="s">@&quot;菜单1&quot;</span> <span class="nl">icon:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;Carrot&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">item1</span> <span class="nl">setHandleCallback:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;点击菜单1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">KOSettingItem</span> <span class="o">*</span><span class="n">item2</span> <span class="o">=</span> <span class="p">[</span><span class="n">KOSettingItem</span> <span class="nl">itemWithTitle:</span><span class="s">@&quot;菜单2&quot;</span> <span class="nl">icon:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;Owl&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">item1</span> <span class="nl">setHandleCallback:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;点击菜单2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">KOSettingItem</span> <span class="o">*</span><span class="n">item3</span> <span class="o">=</span> <span class="p">[</span><span class="n">KOSettingItem</span> <span class="nl">itemWithTitle:</span><span class="s">@&quot;菜单3&quot;</span> <span class="nl">icon:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;Rubber-Duck&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">item1</span> <span class="nl">setHandleCallback:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;点击菜单3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">KOSettingItem</span> <span class="o">*</span><span class="n">item4</span> <span class="o">=</span> <span class="p">[</span><span class="n">KOSettingItem</span> <span class="nl">itemWithTitle:</span><span class="s">@&quot;菜单4&quot;</span> <span class="nl">icon:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;Snowman&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">item1</span> <span class="nl">setHandleCallback:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;点击菜单4&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">settingItems</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span><span class="p">,</span> <span class="n">item4</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后修改一下TableView的Datasource和Delegate</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">settingItems</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">heightForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">44</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="s">@&quot;cell&quot;</span>
</span><span class='line'>                                                            <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">KOSettingItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">settingItems</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">imageIcon</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">accessoryType</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">accessoryType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tableView</span> <span class="nl">deselectRowAtIndexPath:</span><span class="n">indexPath</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">KOSettingItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">settingItems</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">handleCallback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">item</span><span class="p">.</span><span class="n">handleCallback</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们发现再也不需要冗长的switch语句，如果需要增删菜单项，只需要修改settingItems里面的item顺序，并且由于点击事件绑定到KOSettingItem里面，也不需要担心事件与item不对应的情况，除非有特殊的样式需求，我们可以几乎不用再更改UITableViewDataSource与UITableViewDelegate的实现。</p>

<h2>尾声</h2>

<p>文章只是提供了一个思路，而且出于简明的目的KOSettingItem的模型非常简单，实际上你可以通过添加变量达到更多的可定制化效果，比如分割线的offset，自定义的accessoryView等等，完整的demo可以戳<a href="https://github.com/KinoAndWorld/MenuSettingViewDemo">这里</a>。</p>

<p>运行一下，最后的结果如图，虽然还是平淡无奇 ：）</p>

<p><img src="http://KinoAndWorld.github.io/images/setting-page-finish.png"></p>

<p>最后吐槽一下自己，真的好久没写博客了<em>(:з」∠)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS测试流程简化：通过脚本导出ipa包与上传到Fir]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2015/06/16/ios-archive-and-post-to-fir-script/"/>
    <updated>2015-06-16T14:01:47+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2015/06/16/ios-archive-and-post-to-fir-script</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>在我们当前的开发流程中，大致分为 <strong>开发-测试-修复Bugs-测试反馈</strong> 这样的循环中，特别是在功能需求频繁修改和UI细节不断调整的节奏中，我们通常需要不停地在Xcode上build-选择profile-archive，然后等待几分钟，导出ipa的包，然后再把包上传到一个版本仓库中，这个仓库或许是自己搭建的服务器，或许是TestFlight、Fir等更专业的内测版本平台，总之通常都需要几个步骤才能全部完成。倘若一日之内需要上传3到4个包，对工作效率的影响尚且不谈，重复同样的事情本身心情就不舒畅。</p>

<h3>祭出利器</h3>

<p>要如何做到把上述的N个步骤简化成一步呢，其实很简单。拿Fir为例，Fir提供了可供调用的app上传接口（其他平台我暂时不知道，如果是自己搭建的服务器肯定可以提供上传接口），而且还有好心人把接口写成了脚本（参考资源1），非常nice。但是这样的话还是要自己导出ipa，还是有些繁琐，于是我又找了些许资料，熟悉了<code>xcodebuild</code>的用法，还顺带找到了别人写好的另一个脚本（参考资源2），剩下的事情就非常简单了，我合并了二者的脚本，做了一些代码修改，详细的代码可以戳<a href="https://gist.github.com/ec0d8072d3389a9f3b02.git">这里</a></p>

<p>这里边有些参数要修改成自己的项目，譬如</p>

<ul>
<li>workspace name</li>
<li>provisioningProfile</li>
<li>scheme name</li>
<li>还有Fir需要的AppID和UserToken</li>
</ul>


<p>配置好之后，把这个脚本放在xcworkspace同级目录，然后终端运行 <code>./archive_to_upload_fir.sh</code>
这时候你可以去喝杯咖啡奶茶美年达或者来一套广播体操，在一片宁静中完成了所有繁琐。</p>

<h3>缺点与改进</h3>

<p>当然我相信这并不是最终的解决方案，因为脚本还是存在着输出信息不够友好，如果出现编译错误还是要自己另外调试等不便，而且脚本本身还存在可以优化的地方，例如一些变量的参数化，让它变得更通用一些。</p>

<hr />

<p>参考资源：</p>

<ul>
<li><p><a href="https://gist.github.com/ggshily/8594b69a266a410d82a0">https://gist.github.com/ggshily/8594b69a266a410d82a0</a></p></li>
<li><p><a href="http://blog.csdn.net/vieri_ch/article/details/45147027">http://blog.csdn.net/vieri_ch/article/details/45147027</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发中一些常量数值]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2015/03/18/ios-const-value/"/>
    <updated>2015-03-18T14:41:02+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2015/03/18/ios-const-value</id>
    <content type="html"><![CDATA[<h3>先说CGFloat</h3>

<p><em>几乎众所周知CGFloat其实是float和double的大一统，32位与64位浮点的联姻</em></p>

<p>那么具体有什么不同？先来看看  CGFloat的一些常量，</p>

<pre><code>CGFLOAT_TYPE
CGFLOAT_MAX
CGFLOAT_MIN
CGFLOAT_DEFINED
CGFLOAT_IS_DOUBLE
</code></pre>

<p>好奇心使然，看了下源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* Definition of `CGFLOAT_TYPE&#39;, `CGFLOAT_IS_DOUBLE&#39;, `CGFLOAT_MIN&#39;, and</span>
</span><span class='line'><span class="cm">   `CGFLOAT_MAX&#39;. */</span>
</span><span class='line'><span class="cp">#if defined(__LP64__) &amp;&amp; __LP64__</span>
</span><span class='line'><span class="cp"># define CGFLOAT_TYPE double</span>
</span><span class='line'><span class="cp"># define CGFLOAT_IS_DOUBLE 1</span>
</span><span class='line'><span class="cp"># define CGFLOAT_MIN DBL_MIN</span>
</span><span class='line'><span class="cp"># define CGFLOAT_MAX DBL_MAX</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp"># define CGFLOAT_TYPE float</span>
</span><span class='line'><span class="cp"># define CGFLOAT_IS_DOUBLE 0</span>
</span><span class='line'><span class="cp"># define CGFLOAT_MIN FLT_MIN</span>
</span><span class='line'><span class="cp"># define CGFLOAT_MAX FLT_MAX</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Definition of the `CGFloat&#39; type and `CGFLOAT_DEFINED&#39;. */</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="n">CGFLOAT_TYPE</span> <span class="n">CGFloat</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define CGFLOAT_DEFINED 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后很清晰地看到</p>

<pre><code>CGFLOAT_TYPE         64位下是double 否则float
CGFLOAT_MAX          64位下是double的max 否则float的max
CGFLOAT_MIN          64位下是double的min 否则float的min
CGFLOAT_DEFINED      就是1 为定义而定义，暂时不知道用来判断什么
CGFLOAT_IS_DOUBLE    64位下是1 否则0
</code></pre>

<p><em>(:з」∠)</em>我是不是很无聊</p>

<p>还有一个，当一个浮点型除以0的时候，有的语言会抛出异常，而oc会返回一个“非正常”的值+INF，我们可以用INFINITY常量判断。ex:(aFloat== INFINITY)</p>

<h3>NSInteger</h3>

<p>类似的， NSInteger也是囊括了int和long的大一统（还有NSUInteger，多个unsigned），定义跟上面的浮点型是一个模子的。
下面说说我踩过的一个坑。</p>

<p>在很久很久以前，我还是习惯用C语言的变量类型int，在5S出来以前大家相安无事，直到有一天一个bug袭击了我。</p>

<p>代码是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">foundIndex</span> <span class="o">=</span> <span class="p">[</span><span class="n">array</span> <span class="nl">indexOfObject:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">NSNotFound</span> <span class="o">==</span> <span class="n">foundIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;not found,handle it&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么iPhone4s，5之流都没问题，到5s上就不对了呢。</p>

<p>刚准备烧柱香拜一拜的时候，我点开了NSNotFound的定义，发现它==NSIntegerMax，而NSIntegerMax==LONG_MAX。</p>

<p>64位下，foundIndex因为超过表示范围会被截断成-1，因此它!=NSNotFound。</p>

<p>类似的还有很多，我们应该多多jump到源码，即使只是头文件，也能发现关于Objective-C的一些底层细节。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于救赎 ——《解忧杂货店》读记]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2014/10/26/jieyouzahuodian-book-review/"/>
    <updated>2014-10-26T23:14:59+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2014/10/26/jieyouzahuodian-book-review</id>
    <content type="html"><![CDATA[<p>虽然对东野圭吾这个作家早就耳熟能详，但实际上，这本书是东野的作品中我看的第一本。
好久没有看到这么有意思的小说了，这样一本温柔平和却一针见血、节奏缓慢却扣人心弦的小说。</p>

<p>故事没有惊天动地的阴谋，没有精心策划的犯罪，有的只是一段段看似微不足道的小事，一个个有着各自烦恼的人。</p>

<p>每个人在生命的某个时刻一定有自己无法抉择的时刻，一定有迷茫于方向的时刻，而在一个机缘巧合之下，一个名为浪矢的杂货店开始接受写着烦恼的信件，并且用心地回复。逐渐地，更多的人开始投递自己的烦恼，而每一章的不同主人公，他们的身世和际遇，或温暖或坎坷地娓娓道来。</p>

<p>每个人命运的走向却和这些抉择有关，类似AVG（文字冒险游戏）一样，不同的抉择，有时候甚至细小到说了一句不同的话，露出了一个不同的表情，都有可能触发人生走向不同的境地，这就是所谓蝴蝶效应。而当每个人物面临自己人生的选择的时候，总能激起我思考，如果是我，我会怎么做。怎样才能幸福？</p>

<p>小说的剧情正以“来信->回信”的方式推进着，随着时间的推进，越来越多的人的烦恼被倾听，被以谓忠告。当然，如果仅仅是这样，这部小说仅仅是一部温情的纪录片，随着剧情的展开，一幅庞大的画卷展开，虽然每一章的人物不同，但他们却有着千丝万缕的关系，再辅以杂货屋的神秘时间操纵设定这一科幻元素，他们的命运锁链环绕着杂货屋交错缠绕，这在结局体现得淋漓尽致，俨然一个因果循环，看得我背脊一凉，大感佩服。</p>

<p>在命运面前，我们都要虔诚，然后斗争，努力，这样我们才能得到救赎。</p>

<p>PS：感觉这本书温和得像是儿童读物啊，没有任何三俗内容，建议编进小学教材。</p>

<p>文字拙劣，谨此为记。
2014/10/25</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信支付的小坑]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2014/09/17/weixinpayforios/"/>
    <updated>2014-09-17T00:08:59+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2014/09/17/weixinpayforios</id>
    <content type="html"><![CDATA[<h2>先说点题外话</h2>

<p>貌似很久很久没更新博客，有半年了吧，这半年忙着毕业的各种事情，忙着小或者比较大的项目，感受着初入职场的艰辛与喜悦，以及过着平淡无奇的小日子————好吧虽然这些都可以成为懒惰的理由，但是回顾一些自己这半年真的过于放松，许多学习的时间被游戏动漫日剧所占据，如果平时不用上班恐怕要变成废宅了吧╮(╯_╰)╭，so，确定一下今后的目标：<code>多写代码、多锻炼、多阅读、多写博客</code>，写博客主要为了思考，因为要在脑中整理语言，沉淀思想，一方面可以巩固记忆，另一方面也算是[热爱生活]的一种方式吧。</p>

<h2>好吧主题其实是</h2>

<p>其实有点为了写博客而写博客的意思，因为要分享的东西挺简单的，更像是吐槽……好吧其实我就是吐槽。</p>

<ul>
<li>吐槽1：微信支付为啥没有iOS的官方demo……实在想不通，服务端有，Android甚至WindowsPhone都有，微信这是对iOS平台歧视的节奏- &ndash;
幸好我大天朝人才辈出，早有人根据<code>渣成翔</code>的官方文档写了微信支付的<a href="https://github.com/gbammc/WechatPayDemo">非官方demo</a></li>
</ul>


<p>里面用了cocoapods， 需要下载的话好好看下说明。</p>

<ul>
<li>吐槽2：微信官方文档
虽然我知道，也理解 写代码的人一般比较讨厌写文档，但是毕竟你是一个支付组件，总有很多人需要仔细阅读的甚至copy文档里边的代码的，你可以写得很简单，但是不要犯一些低级错误好吗 (#‵′)。说明含糊不清我就不提了（其实上面的github主页有吐槽），实例代码都写错这就有点。。。
贴两段：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">PayReq</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">PayReq</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="n">request</span><span class="p">.</span><span class="n">partnerId</span> <span class="o">=</span> <span class="n">_pactnerid</span><span class="p">;</span>
</span><span class='line'><span class="n">request</span><span class="p">.</span><span class="n">prepayId</span><span class="o">=</span> <span class="n">_prapayid</span><span class="p">;</span>
</span><span class='line'><span class="n">Request</span><span class="p">.</span><span class="n">package</span> <span class="o">=</span> <span class="n">_package</span><span class="p">;</span>
</span><span class='line'><span class="n">request</span><span class="p">.</span><span class="n">nonceStr</span><span class="o">=</span> <span class="n">_noncestr</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>第三行好好的request突然变成Request了……当时看到整个人都不太好</p>

<p>And</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 构造参数列表</span>
</span><span class='line'><span class="n">NSMutableDictionary</span> <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">params</span> <span class="nl">setObject:</span><span class="s">@&quot;1234567&quot;</span> <span class="nl">forKey:</span><span class="s">@&quot;appid&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>NSMutableDictionary params。。。原来NSMutableDictionary不是引用类型啊T.T</p>

<p>有些文档看了真的会哭。</p>

<ul>
<li>吐槽3：微信支付SDK</li>
</ul>


<p>处于安全便捷考虑，几乎所有的操作都在服务端完成，然后今天服务端给出API，也跟Android调通了。我本以为既然Android端都OK了，那iOS端应该也没多大问题……但是，我错了，我发现iOS端调用微信支付不成功，马上弹回原应用，拿到的是<code>errCode = -1</code>的错误。这些我就思密达了，然后一直在找是不是自己哪里调用不对。弄了一个多小时，未果。
然后很郁闷地吃了个饭，回去之后我跟服务端一步步联调……才发现问题出在PayReq的<code>sign</code>变量和<code>package</code>变量不对应。</p>

<p>再深入纠结原因，发现原来Android的文档或者SDK和iOS的处理是不一样的，而服务端是参考了Android的文档来做，我当场就呵呵了。
如果两端的处理方法不一样，至少也该说明一下吧。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZXingObjC-addition]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2014/03/20/zxingobjc-addition/"/>
    <updated>2014-03-20T16:10:20+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2014/03/20/zxingobjc-addition</id>
    <content type="html"><![CDATA[<h2>二维码扫描库ZXingObjC功能完善</h2>

<p>对于做过二维码扫描的大概都对ZXing这个库不陌生，然而这个库由于跨平台，代码文件过于臃肿，而且各种步骤非常麻烦。。。
还有不知道什么原因，ZXing的iOS库在最新发布版本不见了。 <code>还是我找不到？</code>
总之因为种种原因，<a href="" title="https://github.com/TheLevelUp/ZXingObjC">ZXingObjC</a> 作为良好的替代方案粗线了。</p>

<p>顺带一提，支持 cocoapods => &lsquo;ZXingObjC&rsquo;, &lsquo;~> 2.2.6&rsquo;</p>

<p>好吧，现在进入主题，这个库很好用，但是我们在做二维码的时候一般会有一个需求，让二维码进入一个区域方才扫描，即是<code>扫描区域</code>
让我比较郁闷的是，这么完善的库居然貌似没有实现这个很常见的功能。</p>

<p>然后上GitHub上看了一下这个<a href="" title="https://github.com/TheLevelUp/ZXingObjC/issues/100">Issue</a> , 以为终于找到解决方案……却发现是个坑。具体怎么坑就不说了……也许是我不会用吧。</p>

<p>然后重新阅读了源码，发现了一个更简单的设置裁剪区域的方法。</p>

<p>&mdash;</p>

<h3>Let&rsquo;s go</h3>

<p>首先，进入<code>ZXCapture.h</code> ，添加一个property</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGRect</span> <span class="n">scanCrop</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后进入<code>ZXCapture.m</code> 的这个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">captureOutput:</span><span class="p">(</span><span class="n">ZXCaptureOutput</span> <span class="o">*</span><span class="p">)</span><span class="n">captureOutput</span>
</span><span class='line'><span class="n">ZXQT</span><span class="p">(</span><span class="nl">didOutputVideoFrame:</span><span class="p">(</span><span class="n">CVImageBufferRef</span><span class="p">)</span><span class="n">videoFrame</span>
</span><span class='line'>     <span class="nl">withSampleBuffer:</span><span class="p">(</span><span class="n">QTSampleBuffer</span> <span class="o">*</span><span class="p">)</span><span class="n">sampleBuffer</span><span class="p">)</span>
</span><span class='line'><span class="n">ZXAV</span><span class="p">(</span><span class="nl">didOutputSampleBuffer:</span><span class="p">(</span><span class="n">CMSampleBufferRef</span><span class="p">)</span><span class="n">sampleBuffer</span><span class="p">)</span>
</span><span class='line'>       <span class="nl">fromConnection:</span><span class="p">(</span><span class="n">ZXCaptureConnection</span> <span class="o">*</span><span class="p">)</span><span class="n">connection</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>将大概570行位置的代码修改为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGImageRef</span> <span class="n">videoFrameImage</span> <span class="o">=</span> <span class="nb">NULL</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">CGRectEqualToRect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">scanCrop</span><span class="p">,</span><span class="n">CGRectZero</span><span class="p">)){</span>
</span><span class='line'>      <span class="n">videoFrameImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">ZXCGImageLuminanceSource</span> <span class="nl">createImageFromBuffer:</span><span class="n">videoFrame</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">videoFrameImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">ZXCGImageLuminanceSource</span> <span class="nl">createImageFromBuffer:</span><span class="n">videoFrame</span>
</span><span class='line'>                                                                   <span class="nl">left:</span><span class="n">_scanCrop</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span>
</span><span class='line'>                                                                    <span class="nl">top:</span><span class="n">_scanCrop</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>                                                                  <span class="nl">width:</span><span class="n">_scanCrop</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span>
</span><span class='line'>                                                                 <span class="nl">height:</span><span class="n">_scanCrop</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就这么简单。。。最后只要在客户端做类似这样的设置就好</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">capture</span><span class="p">.</span><span class="n">scanCrop</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="n">_scanImageView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">_scanImageView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">_scanImageView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">_scanImageView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>唯一需要注意的是，这个frame的 x 和 y 需要颠倒，具体原因应该跟capture的rotation有关。</p>

<p>暂时这么多吧- -虽然没人看~默默记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客成功迁移到Octopress]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2014/03/19/first-blog-with-octopress/"/>
    <updated>2014-03-19T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2014/03/19/first-blog-with-octopress</id>
    <content type="html"><![CDATA[<h2>经过三番几次的努力- -终于成功迁移。</h2>

<p>噢，就这么多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V for Vendetta comment]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2014/02/28/v-for-vendetta-comment/"/>
    <updated>2014-02-28T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2014/02/28/v-for-vendetta-comment</id>
    <content type="html"><![CDATA[<h2>每个人心里都有抗争的种子(V字仇杀队 影评)</h2>

<p>单从标题来看,这是一部关于仇恨(vendetta 仇杀,正是V字头)的故事,而整部影片,也确实在讲述一个失败的病毒实验体,或者说受害者V的复仇故事. V潇洒,凌然而深邃,永远戴着一副小丑似的玩世不恭的面具,而隐藏在背后的确是伤痕累累的心,和如同深渊一般噬骨的仇恨.</p>

<p>当他一步一步成功实施他的一揽子复仇计划,将警探玩弄于鼓掌之间,这是V的仇恨,但他不是杀人魔,枪炮与玫瑰同在.V心中最柔软的地方借着女主展现了出来,以略显残酷的方式,而现实本身也是如此残酷.</p>

<p>V最后决定和最后的敌人同归于尽,我想是他想亲手结束这一切吧,这一切罪孽,他们的和他自己的.</p>

<p>载着他的尸体和炸药一起撞向大楼,伴随着宏伟的交响乐,夜空炸开了绚烂的焰火,这一切显得隆重而激昂,带着对V的悲伤和叹为观止的爆炸画面感,思绪也随之炸开,伴着因焰火而亮如白昼的冥空.</p>

<p>亿万人们涌上街头,全部戴着V的面具.
或许是因为面具的掩饰人们毫无保留的肆意,
或许是V的面具给了人们巨大的力量和勇气,
而毫无疑问的是,V给了一个伟大的救赎.
他解救的不只是他自己,还有恐怖统治下的每一个人.
而我们每一个人,心中其实都有一个V,是对压迫的仇,对剥削的杀.</p>

<p>敌人都消失了,而其实,敌人一直都在.
只要这个世界还存在压迫,斗争便绝不停息.
只要这个世界还存在硝烟,玫瑰也愈加鲜艳.</p>

<p>V死了,却留下了什么.</p>

<p>这时候,脑海里回响着片头的那句话:
&ldquo;我们要记住思想,而不是记住人,因为人可能会失败.他可能会被捕,被杀死,被遗忘.但400年以后,思想仍可改变世界.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些iOS面试题的探索]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/12/17/some-ios-question-study/"/>
    <updated>2013-12-17T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/12/17/some-ios-question-study</id>
    <content type="html"><![CDATA[<p>其实就是因为cocosachina的<a href="http://www.cocoachina.com/gamedev/misc/2013/1209/7499.html">一篇文章</a>
看了之后发现自己好多objective-C的细节都没弄清楚，所以记录一下，会的不会的都写一下~</p>

<h3>==题目==</h3>

<p>1、假设有三个对象，一个父类的父类，一个父类和一个子类。父类的父类持有父类的引用（retain），父类持有子类的引用（retain），子类持有父类的引用（retain）。父类的父类释放（release）父类，解释下会发生什么。</p>

<pre><code>`父类被父类的父类释放掉以后，父类的引用计数-1，而因为子类拥有父类的计数，父类并未销毁。`
</code></pre>

<p>2、当一个空指针（nil pointer）调用了一个方法会发生什么？</p>

<pre><code>`安然无恙 —— 这是oc自带的消息机制，nil也能发送消息，而不会报错`
</code></pre>

<p>3、为什么retainCount绝对不能用在发布的代码中？请给出两个相对独立的解释。</p>

<pre><code>- retainCount受到时间和framework的影响太大，不能准确反映内存的引用计数
- retainCount很容易迷惑人，采取规范的内存管理才是正道
</code></pre>

<p>4、请说明一下你查找或者解决内存泄露的处理过程。</p>

<pre><code>`使用instruments作为动态分析的手段，还有Xcode的静态内存分析`
</code></pre>

<p>5、解释下自动回收池(autorelease pool)在程序运行时是如何运作的.</p>

<pre><code>`xcode为开发者写的代码外层包了一层NSAutoreleasePool。建立一个回收池堆栈(Stack)每次对象发送autorelease消息时，对象的引用计数并不真正变化，而是向pool中添加一条记录，记下对象的这种要求。最后当pool发送drain或release消息时，池中的所有对象的这种要求一一被执行。顺便说下使用场景：`
</code></pre>

<ul>
<li>应用不是基于”Application Kit”，像”Command-line tool”，因为它并没有内置的”autorelease pools”的支持。</li>
<li>创建线程，你必需在线程开始时创建一个”Autorelease Pool”实例。反之，会造成内存池露（会在以后的文章详细说明线程与池的技巧）。</li>
<li>一个循环内创建了太多的临时对象，你应该为他们创建一个”Autorelease Pool”对象，并在下次循还前销毁它们。</li>
</ul>


<p>6、当处理属性申明的时候，原子（atomic）跟 非原子（non-atomic）属性有什么区别？</p>

<pre><code>`事关多线程，原子（atomic）可以说是线程安全的，也就是在读取这个属性的变量的时候，会进行一些额外的操作（比如锁）.所以说，atomic会比较安全但是比较耗时。`
</code></pre>

<p>7、在C语言中，你如何能用尽可能短的时间来倒转一个字符串？</p>

<pre><code>`这个我真不知道有什么高效的方法~`  [有篇文章可参考](http://www.cnblogs.com/JCSU/articles/1305401.html)
</code></pre>

<p>8、遍历一个NSArray和一个NSSet，哪一个更快？</p>

<pre><code>`其实意思是问，遍历一个链表和哈希表，哪个更快？`
[参考一下](http://maccrazy.diandian.com/post/2011-10-09/5671451) 结论在最后
</code></pre>

<p>9、Objective-C中的posing指的是什么？</p>

<pre><code>[参考](http://blog.csdn.net/tenfyguo/article/details/9220535)
</code></pre>

<p>10、copy跟retain有什么区别？</p>

<pre><code>`一个是复制内容，一个引用计数+1，（nsstring比较特殊，两个的功能几乎一样）需要注意的是，自定义的类需要重写一个方法以实现自己的深复制：`

    -(id) copyWithZone:(NSZone *) Zone{
        grandSuper * scCopy;
        scCopy=[[[self class] allocWithZone:Zone]init];
        return scCopy;
    }
</code></pre>

<p>11、执行如下的代码会发生什么情况？</p>

<pre><code>    Ball *ball = [[[[Ball alloc] init] autorelease] autorelease]; 
</code></pre>

<p>&mdash;&mdash;&mdash;崩溃，因为重复释放，在自动回收池下一次进行回收时崩溃</p>

<p>很多地方理解可能还是有问题~继续努力吧 ↖(^ω^)↗</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to use delegate in cocos2d x]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/12/13/how-to-use-delegate-in-cocos2d-x/"/>
    <updated>2013-12-13T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/12/13/how-to-use-delegate-in-cocos2d-x</id>
    <content type="html"><![CDATA[<p>近来弄了下Coco2d-X，这个框架真的很棒，让游戏开发变得简单多了，以至于让我这样搞应用的都能很快上手。
熟悉objective-C编程的肯定都知道COCOA中的<code>protocol（协议）-delegate（委托）模式</code>
习惯了这种编程方式，然后在写cocos2d-x的时候发现没相关语法，感觉不太爽儿~</p>

<p>然后转念一想，原理其实很简单，可以自己去实现一个简陋的<code>protocol（协议）-delegate（委托）模式</code>。</p>

<p>无非就是定义一个接口，然后给delegate类这个接口的约束。</p>

<h3>C++的接口就是抽象类</h3>

<pre><code>    /**
     *  协议
     */
    class IBoardNumberClickDelegate {

    public:
        virtual ~IBoardNumberClickDelegate(){};
        virtual void numberDidClick(int number) = 0;
    };
</code></pre>

<p>就是介么简单！！！</p>

<h3>C++通过多继承使用接口</h3>

<pre><code>    class MathQuestionScene : public CCScene , public IBoardNumberClickDelegate{
        //…… 为了节省篇幅我直接把实现写了
        void numberDidClick(int number){
            CCLOG("点击%d",number);
        }
    }
</code></pre>

<h3>然后另一个类调用</h3>

<pre><code>    class NumberKeyBoard : public CCNode{
    public:
        IBoardNumberClickDelegate *delegate;
    private:
        void numberSelected(int number){
            if (delegate) {
                delegate-&gt;numberDidClick(number);
            }
        }
    }
</code></pre>

<p>用的时候在MathQuestionScene内设置</p>

<pre><code>    _numberKeyBoard = NumberKeyBoard::create();
    _numberKeyBoard-&gt;delegate = this;
</code></pre>

<p>就OK了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亲历的iOS面试题]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/12/03/ios-interview-question/"/>
    <updated>2013-12-03T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/12/03/ios-interview-question</id>
    <content type="html"><![CDATA[<p>上个星期在V2EX上看到一个酷工作然后挺心动的，俗话说心动不如行动，所以我二话不说当基(机)立断地把简历投了去~
然后马不停蹄地跑去广州面试了~</p>

<p>说实话面试官江哥给我感觉很亲切……完全没有紧张的氛围~当然内心还是有点小紧张的~
好吧进入正题，主要是有几个问题我感觉自己理解的还是不够透彻，趁着面试暴露出来，现在就加深一下了解。</p>

<h2>block到底是什么东西</h2>

<p>按照我的理解，block类似一个函数指针，主要应用场景总结下就是：
&ndash; 当调用其他的功能模块，或者自己写一个通用的功能模块的时候，代替delegate去做回调，这样的好处是不用再去声明回调函数，再去函数里面处理，而是直接把处理结果传进去，直接而优雅。
&ndash; 使用多线程（GCD）的时候，因为GCD的语法是直接用block的，所以这两个好搭档可谓是天衣无缝，举个栗子：</p>

<pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    //进行异步操作
    dispatch_async(dispatch_get_main_queue(), ^{
        //回到主线程
    });
});
</code></pre>

<p>短短几行代码就可以线程安全地玩转在新创建的线程和主线程之间，这种便利的愉悦是不言而喻的~</p>

<p>因为我自己理解也不是很深~所以还需要慢慢学习</p>

<p>关于语法描述 <a href="http://fuckingblocksyntax.com/">看这里</a>
还有个很好地资料 <a href="http://onevcat.com/2011/11/objective-c%E4%B8%AD%E7%9A%84block/">看这里</a></p>

<h2>多线程的几种实现方式</h2>

<ul>
<li><p>NSTheard</p></li>
<li><p>NSOperation</p></li>
<li><p>GCD</p></li>
</ul>


<p>具体使用栗子：<a href="http://www.uml.org.cn/mobiledev/201210262.asp">http://www.uml.org.cn/mobiledev/201210262.asp</a></p>

<h2>页面动画的几种实现方式</h2>

<ul>
<li><p>UIView animation 动画</p></li>
<li><p>CoreAnimation 动画  参考：<a href="http://www.dreamingwish.com/dream-2012/the-concept-of-coreanimation-programming-guide.html">iOS核心动画编程指南</a></p></li>
<li><p>简单粗暴地用 OpenGL ES实现</p></li>
</ul>


<p>这是我的答案……不知道是否正确或者全面
目前我也就第一个用得比较多，CoreAnimation还在慢慢学 ╮(╯▽╰)╭</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS常用第三方库的备忘和介绍]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/10/21/ios-third-tool-introduce/"/>
    <updated>2013-10-21T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/10/21/ios-third-tool-introduce</id>
    <content type="html"><![CDATA[<p>俗话说不要重复造轮子~身为一个IOS开发者我们有必要知道一些先进好用的第三方开源库，
不仅可以在项目中加快开发进度，更可以通过研究这些开源库提高自己的水平~</p>

<p>下面介绍自己用过和流行的一些开源库</p>

<h2>视图</h2>

<ul>
<li><a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a> 很常用的模态等待窗口~使用简单明了</li>
<li><a href="https://github.com/brennanMKE/PhotoZoom">PZPhotoView</a> 一个封装的比较好的滚动视图</li>
<li><a href="https://github.com/rs/SDWebImage">SDWebImage</a> 替代UIImageView，支持异步加载网络图片和自动缓存</li>
<li><a href="https://github.com/enormego/EGOImageLoading">EGOImageView</a> 同上</li>
<li><a href="https://github.com/Inferis/ViewDeck">ViewDeck</a> 仿Path和Facebook的左右侧滑视图</li>
<li><a href="https://github.com/Grouper/FlatUIKit">FlatUIKit</a> 看起来很棒的UI组件 正如名字一样 扁平风</li>
<li><a href="https://github.com/enormego/EGOTableViewPullRefresh">EGOTableViewPullRefresh</a> 下拉刷新 上拉加载更多的功能集成 很常用</li>
</ul>


<h2>网络</h2>

<ul>
<li><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> 最受欢迎的网络框架 集成得很好而且易于扩展</li>
<li><a href="https://github.com/MugunthKumar/MKNetworkKit">MKNetworkKit</a> 这个我比较常用 因为使用简单方便~</li>
</ul>


<h2>数据</h2>

<ul>
<li><a href="https://github.com/johnezang/JSONKit">JSONKit</a> 简单易用的JSON解析库</li>
<li><a href="https://github.com/ccgus/fmdb">FMDB</a> 很知名的SQLITE操作封装库</li>
<li><a href="https://github.com/kelp404/CocoaSecurity">CocoaSecurity</a> 提供了 AES加解密和Hash(MD5, HmacMD5, SHA1~SHA512, HmacSHA1~HmacSHA512)的加密</li>
</ul>


<h2>综合</h2>

<ul>
<li><a href="https://github.com/jverkoey/nimbus">nimbus</a> 一个替代THREE20的框架 功能集成了蛮多的</li>
<li><a href="https://github.com/devinross/tapkulibrary">tapkulibrary</a> 封装了常用的UI控件和功能</li>
<li><a href="https://github.com/soffes/sstoolkit">sstoolkit</a> 这个也比较知名 提供了很多常用的扩展和UI控件</li>
</ul>


<p>先想到这么多……有空再补充吧~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用书签 and 开发资料]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/08/21/bookmark-collection/"/>
    <updated>2013-08-21T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/08/21/bookmark-collection</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://ruby-china.org/wiki/install_ruby_guide">如何快速正确的安装 Ruby, Rails 运行环境</a></p></li>
<li><p><a href="http://wuyuans.com/2012/09/cpp-operator-overload/">c++运算符重载总结</a></p></li>
<li><p><a href="http://www.cnblogs.com/xFreedom/archive/2011/05/16/2048037.html">标准C++中的string类的用法总结</a></p></li>
<li><p><a href="http://www.cnblogs.com/liqiongxiong/archive/2013/01/24/2875722.html">C++时间与字符串转换</a></p></li>
<li><p><a href="http://www.cocoachina.com/newbie/tutorial/2010/1206/2443.html">四个 iPhone 应用的原型设计工具介绍</a></p></li>
<li><p><a href="http://blog.csdn.net/column/details/jacky-cocos2dx.html">玩转cocos2d-x  从零开始的cocos2d-x开发之路</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我自己常常用到的第三方控件]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/08/20/userful-third-controls/"/>
    <updated>2013-08-20T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/08/20/userful-third-controls</id>
    <content type="html"><![CDATA[<ul>
<li>EGOTableViewPullRefresh（下拉刷新控件)
<a href="https://github.com/emreberge/EGOTableViewPullRefresh">Github地址</a></li>
</ul>


<p>只需要实现<code>PullTableViewDelegate</code>的这两个委托:</p>

<pre><code>- (void)pullTableViewDidTriggerRefresh:(PullTableView *)pullTableView
{
    [self performSelector:@selector(refreshTable) withObject:nil afterDelay:3.0f];
}

- (void)pullTableViewDidTriggerLoadMore:(PullTableView *)pullTableView
{
    [self performSelector:@selector(loadMoreDataToTable) withObject:nil afterDelay:3.0f];
}
</code></pre>

<p>这里面指向的具体方法是数据请求完成后进行处理和显示的操作，比如一般在里面reloadData之类：</p>

<pre><code>- (void) refreshTable
{
    /*
     Code to actually refresh goes here.
     */
    self.pullTableView.pullLastRefreshDate = [NSDate date];
    self.pullTableView.pullTableIsRefreshing = NO;
}

- (void) loadMoreDataToTable
{
    /*
     Code to actually load more data goes here.
     */
    self.pullTableView.pullTableIsLoadingMore = NO;
}
</code></pre>

<p>几乎就这么多，在注释部分进行逻辑处理，就好了。
注:这不是原版的，但我感觉是最完善的（上拉加载更多以及更自由的定制（背景颜色）等等），而且使用也更加简化。</p>

<ul>
<li>MMDrawerController(抽屉视图)
<a href="https://github.com/mutualmobile/MMDrawerController">Github地址</a></li>
</ul>


<p>抽屉式布局一直很火，应用也很广泛，相关控件也很多，感觉这个控件封装得比较好，而且功能也强大的很。
核心调用代码就几行：</p>

<pre><code>UIViewController * leftDrawer = [[UIViewController alloc] init];
UIViewController * center = [[UIViewController alloc] init];
UIViewController * rightDrawer = [[UIViewController alloc] init];
MMDrawerController * drawerController = [[MMDrawerController alloc]
                                       initWithCenterViewController:center
                                           leftDrawerViewController:leftDrawer
                                           rightDrawerViewController:rightDrawer];
</code></pre>

<p>其他的下载官方的demo。十分灰常详细。</p>

<ul>
<li>EGOImageView(异步加载图片)</li>
</ul>


<p>这个控件的使用非常简单，不用介绍过多~
而关于这个控件我有一篇专门的博客，可戳<a href="http://kinoandworld.github.io/2013/08/05/egoimage-addition/">这里</a></p>

<ul>
<li>PZPagingScrollView(延迟加载的滚动视图)
[额……地址暂时找不到了。]</li>
</ul>


<p>用这个控件可以很方便地做一个相册，提供的委托挺多的，有点类似UITableView委托的写法：</p>

<pre><code>- (Class)pagingScrollView:(PZPagingScrollView *)pagingScrollView classForIndex:(NSUInteger)index;
- (NSUInteger)pagingScrollViewPagingViewCount:(PZPagingScrollView *)pagingScrollView;
- (UIView *)pagingScrollView:(PZPagingScrollView *)pagingScrollView pageViewForIndex:(NSUInteger)index;
- (void)pagingScrollView:(PZPagingScrollView *)pagingScrollView preparePageViewForDisplay:(UIView *)pageView forIndex:(NSUInteger)index;
</code></pre>

<p>对这个控件我也做了一些修改，具体使用还是看例子吧。我都集成好放进一个demo里面了~</p>

<p>感兴趣的可以<a href="https://github.com/KinoAndWorld/UsefulThirdsControlsDemo">看看</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给EGOImageView增加下载进度功能]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/08/05/egoimage-addition/"/>
    <updated>2013-08-05T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/08/05/egoimage-addition</id>
    <content type="html"><![CDATA[<h3>给EGOImageView异步加载图片增加下载进度功能</h3>

<p>&mdash;</p>

<p>做网络图片相关的项目时，离不开缓存和异步加载。于是找到了一个很好用的第三方控件
 <a href="https://github.com/enormego/EGOImageLoading">EGOImageView</a></p>

<p>灰常简单好用~</p>

<p>但是呢，随着项目的进一步展开，弱弱地发现这个控件并没有<code>获取图片加载进度</code>这么个功能，而且一般我们等待图片加载时需要有一个显示进度的进度条，这样就无法实现了。</p>

<p>于是我上网找到了获取进度的方法，然后自己改造了一下EGOImageView，写这篇博客，仅做一下记录。</p>

<h3>首先，找到EGOImageLoadConnection这个类</h3>

<p>在它的.h文件加上下面两个自定义的委托</p>

<pre><code>@protocol EGOImageLoadConnectionDelegate&lt;NSObject&gt;
- (void)imageLoadConnectionDidFinishLoading:(EGOImageLoadConnection *)connection;
- (void)imageLoadConnection:(EGOImageLoadConnection *)connection didFailWithError:(NSError *)error;
//进度委托
- (void)imageLoadConnection:(EGOImageLoadConnection *)connection didDownLoadData:(long long)btyes;
- (void)imageLoadConnection:(EGOImageLoadConnection *)connection countDownLoadData:(long long)btyes;
@end
</code></pre>

<p>紧接着，进入.m文件，找到这两个方法，这两个方法是关键。</p>

<pre><code>didReceiveResponse是得到一个有效图片URL后返回的信息，里面就包含了图片的大小
didReceiveData则是在一张图片下载过程中，不断传输过来的数据，因此这个方法可能会调用不止一次

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    if(connection != _connection) return;
    [_responseData appendData:data];
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
    if(connection != _connection) return;
    self.response = response;
}
</code></pre>

<p>网上找了方法，加进去，变成下面这样</p>

<pre><code>- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    if(connection != _connection) return;
    [_responseData appendData:data];
    //NSLog(@"%lld",(long long)[data length]);
    if([self.delegate respondsToSelector:@selector(imageLoadConnection:didDownLoadData:)]) {
        [self.delegate imageLoadConnection:self didDownLoadData:(long long)[data length]];
    }
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {

    long long total_;
    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
    if(httpResponse &amp;&amp; [httpResponse respondsToSelector:@selector(allHeaderFields)]){
        NSDictionary *httpResponseHeaderFields = [httpResponse allHeaderFields];

        total_ = [[httpResponseHeaderFields objectForKey:@"Content-Length"] longLongValue];
        if([self.delegate respondsToSelector:@selector(imageLoadConnection:countDownLoadData:)]) {
            [self.delegate imageLoadConnection:self countDownLoadData:total_];
        }
        //NSLog(@"total:%lld", total_);
    }
    if(connection != _connection) return;
    self.response = response;
}
</code></pre>

<p>理论上，现在已经获取到了数据的大小和每次传输的数据量，接着进入EGOImageLoader.m文件。
然后我遵循它原本的模式（观察者），添加两个宏定义:</p>

<pre><code>#if __EGOIL_USE_NOTIF
    #define kImageNotificationLoaded(s) [@"kEGOImageLoaderNotificationLoaded-" stringByAppendingString:keyForURL(s, nil)]
    #define kImageNotificationLoadFailed(s) [@"kEGOImageLoaderNotificationLoadFailed-" stringByAppendingString:keyForURL(s, nil)]
    //下载进度
    #define kImageNotificationLoadData(s) [@"kEGOImageLoaderNotificationLoadedData-" stringByAppendingString:keyForURL(s, nil)]
    #define kImageNotificationCountLoadData(s) [@"kEGOImageLoaderNotificationCountLoadData-" stringByAppendingString:keyForURL(s, nil)]
#endif
</code></pre>

<p>接着同样在 <code>-(void)loadImageForURL:(NSURL*)aURL observer:(id&lt;EGOImageLoaderObserver&gt;)observer;</code>
方法添加观察者</p>

<pre><code>//进度的观察
if([observer respondsToSelector:@selector(imageLoaderDidLoadData:)]) {
    [[NSNotificationCenter defaultCenter] addObserver:observer selector:@selector(imageLoaderDidLoadData:) name:kImageNotificationLoadData(aURL) object:self];
}
if([observer respondsToSelector:@selector(imageLoaderDidCountLoadData:)]) {
    [[NSNotificationCenter defaultCenter] addObserver:observer selector:@selector(imageLoaderDidCountLoadData:) name:kImageNotificationCountLoadData(aURL) object:self];
}
</code></pre>

<p>和在 <code>-(void)removeObserver:(id&lt;EGOImageLoaderObserver&gt;)observer forURL:(NSURL*)aURL;</code>
方法删除观察者</p>

<pre><code>// 移除下载进度观察者
[[NSNotificationCenter defaultCenter] removeObserver:observer name:kImageNotificationCountLoadData(aURL) object:self];
[[NSNotificationCenter defaultCenter] removeObserver:observer name:kImageNotificationLoadData(aURL) object:self];
</code></pre>

<p>接着，该实现刚刚写的那两个委托了</p>

<pre><code>#pragma mark URL Connection delegate methods
//下载进度
- (void)imageLoadConnection:(EGOImageLoadConnection *)connection didDownLoadData:(long long)btyes{
#if __EGOIL_USE_NOTIF
    NSNotification* notification = [NSNotification notificationWithName:kImageNotificationLoadData(connection.imageURL)
                                                                 object:self
                                                               userInfo:[NSDictionary dictionaryWithObjectsAndKeys:
                                                                         [NSNumber numberWithLongLong:btyes],@"btyes",
                                                                         connection.imageURL,@"imageURL",nil]];

    [[NSNotificationCenter defaultCenter] performSelectorOnMainThread:@selector(postNotification:) withObject:notification waitUntilDone:YES];
#endif
}

- (void)imageLoadConnection:(EGOImageLoadConnection *)connection countDownLoadData:(long long)btyes{
#if __EGOIL_USE_NOTIF
    NSNotification* notification = [NSNotification notificationWithName:kImageNotificationCountLoadData(connection.imageURL)
                                                                 object:self
                                                               userInfo:[NSDictionary dictionaryWithObjectsAndKeys:
                                                                         [NSNumber numberWithLongLong:btyes],@"btyes",
                                                                         connection.imageURL,@"imageURL",nil]];

    [[NSNotificationCenter defaultCenter] performSelectorOnMainThread:@selector(postNotification:) withObject:notification waitUntilDone:YES];
#endif
}
</code></pre>

<p>最后呢，我们再给EGOImageView.h文件加两个委托</p>

<pre><code>//图片进度
- (void)imageViewImageProgress:(long long)bytes;
- (void)imageViewImageProgressCount:(long long)bytes;
</code></pre>

<p>还记得我刚刚加的两个通知么，现在派上用场了，在.m文件加上如下代码</p>

<pre><code>//进度处理
- (void)imageLoaderDidLoadData:(NSNotification*)notification {
    if(![[[notification userInfo] objectForKey:@"imageURL"] isEqual:self.imageURL]) return;
    long long bytes = [[[notification userInfo] objectForKey:@"btyes"] longLongValue];

    //NSLog(@"sub:%lld",bytes);
    if([self.delegate respondsToSelector:@selector(imageViewImageProgress:)]) {
        [self.delegate imageViewImageProgress:bytes];
    }
}

- (void)imageLoaderDidCountLoadData:(NSNotification*)notification {

    if(![[[notification userInfo] objectForKey:@"imageURL"] isEqual:self.imageURL]) return;
    long long bytes = [[[notification userInfo] objectForKey:@"btyes"] longLongValue];

    if([self.delegate respondsToSelector:@selector(imageViewImageProgressCount:)]) {
        [self.delegate imageViewImageProgressCount:bytes];
    }
}
</code></pre>

<p>大功告成。
<img src="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby学习笔记-杂记]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/07/12/ruby-study-note-02/"/>
    <updated>2013-07-12T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/07/12/ruby-study-note-02</id>
    <content type="html"><![CDATA[<p>比较零散的记录</p>

<p>&mdash;</p>

<h2>array操作</h2>

<p><code>.push</code> 很明显就是添加一个元素</p>

<p><code>&lt;&lt;</code> 添加元素另一种写法</p>

<pre><code>    "Yukihiro " &lt;&lt; "Matsumoto"
    # ==&gt; "Yukihiro Matsumoto"
</code></pre>

<p><code>||=</code> 这个语法也挺奇怪，意思如下</p>

<pre><code>prime_array ||= [] 这句的意思等于 
prime_array = [] if prime_array.nil?
</code></pre>

<p><code>yield</code>关键字 算是占位符，或者有说类似虚函数，后面才实现</p>

<pre><code>def greeter #
    yield
end
phrase = Proc.new {puts "Hello there!"}
greeter(&amp;phrase)
</code></pre>

<p><code>collect</code> or <code>map</code> or <code>select</code> 这三个的作用。。算是迭代器吧c操作数字数组等，map操作字符串数组……不过我暂时不知道他们的区别。</p>

<p><code>lambda</code> 匿名函数，相当于一个block
<code>is_a?[类型名]</code> 这个语法就是判断一个变量是否是某种类型 有种isSubClass的概念</p>

<pre><code>my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]
symbol_filter = lambda {|x| x.is_a? Symbol}
symbols = my_array.select(&amp;symbol_filter)
</code></pre>

<p><code>attr_accessor</code>  <code>attr_reader</code> <code>attr_writer</code> 三种属性，或者说访问器，也就是给变量加上一些访问设置，主要用在类里边的~</p>

<p>先到这里，以后慢慢补充~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby学习笔记-初步涉猎]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/06/29/ruby-study-note-01/"/>
    <updated>2013-06-29T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/06/29/ruby-study-note-01</id>
    <content type="html"><![CDATA[<p>闲来无事，上codecademy学下Ruby。
尊贵的红宝石，美好而瑰丽，让人不忍一睹风采……好吧我太废话了。
根据codecademy的介绍，Ruby的特性非常明显:
&ndash; 高级语言（High-level）
&ndash; 解释型语言（Interpreted）
&ndash; 面向对象（Object-oriented）
&ndash; 简单易用（Easy to use）</p>

<p>当然……作为一种面向对象的语言，这些特点几乎是必须的……
话说……我不知道ruby算不算脚本语言。</p>

<p>&mdash;</p>

<h2>变量</h2>

<p>ruby的变量定义和数据类型真是轻便快捷，比较类似javascript吧，弱类型。
变量是无需定义的，抑或称之为动态数据类型吧。
比如</p>

<pre><code>i = 1
s = "string"
arr = [1,2,3]
</code></pre>

<p>真是方便得要死。=_=</p>

<p>跟其他面向对象语言类似，ruby的所有数据类型都是对象。</p>

<h2>操作符</h2>

<p>操作符基本跟其他语言相似。有几个不同的地方，记录一下：
10 ** 2  #相当于10的2次方 这种写法也挺好的</p>

<h2>字符串（string）</h2>

<p>有两种形式： <code>"string"</code> 和 <code>'string'</code>
比较方便的是，字符串内变量的引用：</p>

<pre><code>favorite_language = "Ruby"
puts "My favorite language is #{favorite_language}!"
My favorite language is Ruby!
</code></pre>

<p>另外，字符串带了很多函数，可以方便的对字符串进行各类操作：</p>

<pre><code>my_name = "eric"
my_name.upcase #转换大小写
=&gt; "ERIC"
my_name.capitalize
=&gt; "Eric"
my_name.reverse #反转
=&gt; "cire"
</code></pre>

<p>puts（put string的简写）和print的区别：</p>

<pre><code>3.times { puts "Hello!" }
Hello!
Hello!
Hello!
3.times { print "Hello!" }
Hello!Hello!Hello!
</code></pre>

<p>也就是一个是带换行的一个不带。</p>

<h1>逻辑运算</h1>

<p>我发现Ruby的很多基本语句都要以<code>End</code>结尾的……感觉似乎不太有必要吧。</p>

<p>最基本的IF语句：</p>

<pre><code>if condition
  # Do something
end
</code></pre>

<p>除了elsif比较奇怪外……其他的还是很规矩</p>

<pre><code>if x &gt; y
  puts "x is greater than y!"
elsif x &lt; y
  puts "x is less than y!"
else
  puts "x equals y!"
end
</code></pre>

<p>然后是比较奇特的unless语法</p>

<pre><code>unless x == 10   #其实就等同于 if x!=10 感觉没少几个字- -不解为什么要加入这个语法。
  puts "I get printed!"
end
</code></pre>

<h2>方法</h2>

<p>方法定义跟其他语言也大同小异</p>

<pre><code>def method_name(arguments)
  # Code to be executed
end
</code></pre>

<p>比较困惑的是返回值的问题，不过找到了<a href="http://imshanks.com/ruby-methods-return-valu/">答案</a></p>

<h2>循环语句</h2>

<p>ruby的循环方式还是很多的：
-while</p>

<pre><code>while true
  puts "I'm an infinite loop!"
end
</code></pre>

<p>-until</p>

<pre><code>until counter == 0
  puts "Counter currently at #{counter}."
  counter -= 1
end
</code></pre>

<p>-for</p>

<pre><code>for number in (0..5) #这里，..表示包括5，...表示不包括
  puts number
end
</code></pre>

<p>还有遍历数组</p>

<pre><code>for item in my_array
  puts item
end
</code></pre>

<p>&ndash;.times</p>

<pre><code>3.times { puts "Chunky bacon!" }
</code></pre>

<p>这样就实现了输出三个字符串，方便得要死</p>

<p>&ndash;.each</p>

<pre><code>one_to_ten.each do |num|
  print (num**2).to_s + " "
end
</code></pre>

<h2>其他</h2>

<p>-数组的操作：</p>

<pre><code>y.push("cartoon foxes") #增加一个元素

z = Array.new(3, "Matz!") #构造方法更灵活地创建数组
</code></pre>

<p>-哈希（hash）</p>

<pre><code>my_hash = {
  :key1 =&gt; "First value!",
  :key2 =&gt; "Second value!",
  :key3 =&gt; "Third value!"
}
my_hash[:key2]
=&gt; "Second value!"
</code></pre>

<p>所谓哈希……其实就是字典吧，键值对的数据结构。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客成功迁移到Octopress]]></title>
    <link href="http://KinoAndWorld.github.io/blog/2013/06/24/my-first-blog/"/>
    <updated>2013-06-24T09:49:23+08:00</updated>
    <id>http://KinoAndWorld.github.io/blog/2013/06/24/my-first-blog</id>
    <content type="html"><![CDATA[<h2>我的第一篇博客</h2>

<p>嗯。我写完了。</p>
]]></content>
  </entry>
  
</feed>
